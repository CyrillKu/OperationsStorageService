//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace Retail.Operations.Storage.Entities
{
	/// <summary>
	/// Database       : OpStorage
	/// Data Source    : tcp://localhost:6666
	/// Server Version : 14.0
	/// </summary>
	public partial class OpStorageDB : LinqToDB.Data.DataConnection
	{
		public ITable<Event>         Events          { get { return this.GetTable<Event>(); } }
		public ITable<Operation>     Operations      { get { return this.GetTable<Operation>(); } }
		public ITable<ParentProcess> ParentProcesses { get { return this.GetTable<ParentProcess>(); } }
		public ITable<Process>       Processes       { get { return this.GetTable<Process>(); } }
		public ITable<Schemaversion> Schemaversions  { get { return this.GetTable<Schemaversion>(); } }

		partial void InitMappingSchema()
		{
		}

		public OpStorageDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public OpStorageDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public OpStorageDB(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public OpStorageDB(LinqToDbConnectionOptions<OpStorageDB> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="public", Name="Events")]
	public partial class Event
	{
		[PrimaryKey, Identity] public long      Id            { get; set; } // bigint
		[Column,     Nullable] public Guid?     EventId       { get; set; } // uuid
		[Column,     Nullable] public string    AggregationId { get; set; } // text
		[Column,     Nullable] public int?      DomainId      { get; set; } // integer
		[Column,     Nullable] public long?     ProcessId     { get; set; } // bigint
		[Column,     Nullable] public byte[]    Content       { get; set; } // bytea
		[Column,     Nullable] public DateTime? Timestamp     { get; set; } // timestamp (6) without time zone

		#region Associations

		/// <summary>
		/// Events_ProcessId_FK
		/// </summary>
		[Association(ThisKey="ProcessId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="Events_ProcessId_FK", BackReferenceName="EventsProcessIdFks")]
		public Process Process { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Operations")]
	public partial class Operation
	{
		[PrimaryKey, Identity] public long      Id        { get; set; } // bigint
		[Column,     Nullable] public int?      Status    { get; set; } // integer
		[Column,     Nullable] public DateTime? Timestamp { get; set; } // timestamp (6) without time zone

		#region Associations

		/// <summary>
		/// ParentProcesses_OperationId_FK_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OperationId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ParentProcess> ParentProcessesOperationIdFks { get; set; }

		/// <summary>
		/// Processes_OperationId_FK_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OperationId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Process> ProcessesOperationIdFks { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ParentProcesses")]
	public partial class ParentProcess
	{
		[PrimaryKey, Identity] public long  Id          { get; set; } // bigint
		[Column,     Nullable] public int?  DomainId    { get; set; } // integer
		[Column,     Nullable] public long? OperationId { get; set; } // bigint

		#region Associations

		/// <summary>
		/// ParentProcesses_OperationId_FK
		/// </summary>
		[Association(ThisKey="OperationId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="ParentProcesses_OperationId_FK", BackReferenceName="ParentProcessesOperationIdFks")]
		public Operation Operation { get; set; }

		/// <summary>
		/// Processes_ParentProcessId_FK_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ParentProcessId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Process> ProcessesParentProcessIdFks { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Processes")]
	public partial class Process
	{
		[PrimaryKey, Identity] public long      Id              { get; set; } // bigint
		[Column,     Nullable] public int?      DomainId        { get; set; } // integer
		[Column,     Nullable] public long?     OperationId     { get; set; } // bigint
		[Column,     Nullable] public int?      State           { get; set; } // integer
		[Column,     Nullable] public DateTime? Timestamp       { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public int?      ParentProcessId { get; set; } // integer

		#region Associations

		/// <summary>
		/// Events_ProcessId_FK_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProcessId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Event> EventsProcessIdFks { get; set; }

		/// <summary>
		/// Processes_OperationId_FK
		/// </summary>
		[Association(ThisKey="OperationId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="Processes_OperationId_FK", BackReferenceName="ProcessesOperationIdFks")]
		public Operation Operation { get; set; }

		/// <summary>
		/// Processes_ParentProcessId_FK
		/// </summary>
		[Association(ThisKey="ParentProcessId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="Processes_ParentProcessId_FK", BackReferenceName="ProcessesParentProcessIdFks")]
		public ParentProcess ParentProcess { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="schemaversions")]
	public partial class Schemaversion
	{
		[Column("schemaversionsid"), PrimaryKey, Identity] public int      Schemaversionsid { get; set; } // integer
		[Column("scriptname"),       NotNull             ] public string   Scriptname       { get; set; } // character varying(255)
		[Column("applied"),          NotNull             ] public DateTime Applied          { get; set; } // timestamp (6) without time zone
	}

	public static partial class TableExtensions
	{
		public static Event Find(this ITable<Event> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Operation Find(this ITable<Operation> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ParentProcess Find(this ITable<ParentProcess> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Process Find(this ITable<Process> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Schemaversion Find(this ITable<Schemaversion> table, int Schemaversionsid)
		{
			return table.FirstOrDefault(t =>
				t.Schemaversionsid == Schemaversionsid);
		}
	}
}

#pragma warning restore 1591
